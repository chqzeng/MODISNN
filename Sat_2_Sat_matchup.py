# -*- coding: utf-8 -*-
"""
Created on Wed Jul 15 18:13:57 2020
Match in situ data with Satellite per pixel extraction
# note: this script relies on the excel engine "xlsxwriter": installed it first e.g., through conda: conda install -c anaconda xlsxwriter

***  -----------use this scirpt as is, some modification in the script may need to fulfil your requirement !!  ------- ***

@author: ZengC
"""
###-----------------------!!!update this block before run the script!!! ----------------------
##store the files generated by `PixEx` in a folder, and provide the folder name to `sDir`
sDir=r'.\MODISNN_PixEX'  
year_list=['2011','2017'] #which year(s) are you training?
stats_name_pattern_OLCI='{lakeID}_L2_gridpts_aggreg_OLCI_{year}_OL_2_WFR_measurements.txt'
stats_name_pattern_MODIS='{lakeID}_Rhos_3km_MODIS_{year}_Level 2_measurements.txt'
#OLCI: the first 7 rows are descriptions, extra row compare with MODIS for expression condition
#MODIS: the 6 rows are descriptions, skip
skip_rows_OLCI,skip_rows_MODIS=7,6
srs_epsg=3174   #the EPSG code for the training area.
lakeID="LErie"
###------------------------------------------------------------------------------------------

import pandas as pd
import numpy as np
from datetime import datetime
import os
import pyproj #import Proj, transform  #lat lon convertion to projected coords

def Match_Sat_Sat_data(Sat_OLCI,Sat_MODIS,srs_epsg=3174):  
    """
    Sat_OLCI: data frame of the OLCI or MERIS sensor data , including columns: ['Name', 'Date(yyyy-MM-dd)','Time(HH_mm_ss)']
    Sat_MODIS: data frame of the MODIS sensor data , including columns: ['Name', 'Date(yyyy-MM-dd)','Time(HH_mm_ss)']
    srs_espg: the EPSG code for the training area.
    return:
        the matched data frame, with the size of len(Sat_OLCI) row and Sat_MODIS.columns; with no matched row filled with NaN valued
    """    
    
    ##create an empty output dataframe with all elements as nan
    Sat_MODIS_matched= pd.DataFrame().reindex(index=Sat_OLCI.index,columns=Sat_MODIS.columns)
    ##Sat_MODIS_matched = Sat_MODIS.iloc[0:0,:].copy()   #an emtpy dataframe, no rows
    
    Tthres=0.3  #time difference from satellite observation <Tthres days will be accepted, default 0.3 day~=6hours
    Sthres=1414  #spatial difference from satellite observation <Sthres degreee will be accepted,default sqrt(2) km
    inProj = pyproj.Proj('epsg:4326')
    outProj = pyproj.Proj('epsg:{}'.format(srs_epsg))  #GL Albers coordinates 
    coords_Sat_OLCI=pyproj.transform(inProj,outProj,Sat_OLCI['Latitude'].tolist(),Sat_OLCI['Longitude'].tolist())
    coords_Sat_MODIS=pyproj.transform(inProj,outProj,Sat_MODIS['Latitude'].tolist(),Sat_MODIS['Longitude'].tolist())
    coords_Sat_OLCI=np.array(coords_Sat_OLCI)
    coords_Sat_MODIS=np.array(coords_Sat_MODIS)
    
    T_Sat_OLCI= pd.to_datetime(Sat_OLCI['Date(yyyy-MM-dd)']+' ' +Sat_OLCI['Time(HH_mm_ss)'])

    #match based on time and data
    #pos_list=pd.Series(NNSearch_T_and_S(Insitu['Name'],Sat['Name'],Insitu['DateTime'], T_Sat,thres=4*3600))  #allow time difference at 4 hours
    for idx in range(len(Sat_MODIS_matched)):  #find the best match for each row
        Sat_temp=Sat_MODIS[Sat_MODIS['Name']==Sat_OLCI['Name'][idx]] #only match with a subset of MODIS records with same name
        T_Sat_temp= pd.to_datetime(Sat_temp['Date(yyyy-MM-dd)']+' ' +Sat_temp['Time(HH_mm_ss)'])
        T_diff=T_Sat_temp-T_Sat_OLCI[idx]
        T_diff=np.abs([v.days+v.seconds/(3600*24) for v in T_diff])  #convert timedelta to #days difference
        
        x,y=coords_Sat_OLCI[0][idx],coords_Sat_OLCI[1][idx]
        x_temp,y_temp=coords_Sat_MODIS[0][Sat_temp.index.tolist()],coords_Sat_MODIS[1][Sat_temp.index.tolist()]
        S_diff=np.sqrt((np.array(x_temp)-x)**2+(np.array(y_temp)-y)**2)
        
        if np.amin(T_diff)<Tthres and S_diff[np.argmin(T_diff)]<Sthres:
            Sat_MODIS_matched.loc[idx,:]=Sat_temp.iloc[np.argmin(T_diff),:]
        
        #show progress at every 1k record been processed;
        if idx%1000==0: print('------Progress: {}-->{}'.format(idx,len(Sat_MODIS_matched)))
        
    return Sat_MODIS_matched

for year in year_list:
    print('------------Processing year: {}'.format(year))
    fSat_OLCI=os.path.join(sDir,stats_name_pattern_OLCI.format(lakeID=lakeID,year=year))  
    fSat_MODIS=os.path.join(sDir,stats_name_pattern_MODIS.format(lakeID=lakeID,year=year))
    
    try:
        ##load the stats from txt files.
        Sat_OLCI=pd.read_csv(fSat_OLCI,skiprows=skip_rows_OLCI,sep='\t',header=0)  
        Sat_MODIS=pd.read_csv(fSat_MODIS,skiprows=skip_rows_MODIS,sep='\t',header=0)  
        #run the match up
        Sat_MODIS_matched=Match_Sat_Sat_data(Sat_OLCI,Sat_MODIS,srs_epsg=srs_epsg) #,Cols_Sat=33
        print('------------Processing finished: {}'.format(year))
    except:
        print('------------Processing failed: {}'.format(year))
        Sat_MODIS_matched=pd.DataFrame()
    
    # Create a Pandas Excel writer using XlsxWriter as the engine.
    print('------------Write result to Excel/csv file: {}'.format(year))
    
    if False:  #export EXCEL file, slow, discarded
        writer = pd.ExcelWriter(os.path.join(sDir,'MODIS_NN_matchup_{}.xlsx').format(year), engine='xlsxwriter')
        # Write each dataframe to a different worksheet.
        #Insitu.to_excel(writer, sheet_name='Insitu')
        Sat_OLCI.to_excel(writer, sheet_name='Sat_OLCI')
        Sat_MODIS_matched.to_excel(writer, sheet_name='Sat_MODIS_matched')
        writer.save()
    else:  #export as csv
        if not os.path.isdir(os.path.join(sDir,'Excel')): os.mkdir(os.path.join(sDir,'Excel'))
        Sat_OLCI.to_csv(os.path.join(sDir,'Excel','MODIS_NN_matchup_{}_{}.csv').format(year,'OLCI'), index=False)
        Sat_MODIS_matched.to_csv(os.path.join(sDir,'Excel','MODIS_NN_matchup_{}_{}.csv').format(year,'MODIS'), index=False)
    
    print('===MODISNN training dataset matchup completed; a result csv written to the input folder ===')